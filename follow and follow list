package TikTok

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

type User struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type FollowRequest struct {
	UserID int `json:"user_id"`
}

type FollowResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type FollowingResponse struct {
	Following []User `json:"following"`
}

var followingMap map[int][]User

func main() {
	followingMap = make(map[int][]User)
	http.HandleFunc("/follow", followHandler)
	http.HandleFunc("/following", followingHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func followHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req FollowRequest
	err := json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	// Check if the user already exists in the following list
	followingList, ok := followingMap[req.UserID]
	if !ok {
		followingList = []User{}
	}

	// Add the user to the following list
	user := User{
		ID:   req.UserID,
		Name: fmt.Sprintf("User %d", req.UserID),
	}
	followingList = append(followingList, user)
	followingMap[req.UserID] = followingList

	resp := FollowResponse{
		Success: true,
		Message: "User followed successfully",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

func followingHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	userID := r.URL.Query().Get("user_id")
	if userID == "" {
		http.Error(w, "Missing user ID", http.StatusBadRequest)
		return
	}

	id := 0
	fmt.Sscanf(userID, "%d", &id)

	followingList, ok := followingMap[id]
	if !ok {
		followingList = []User{}
	}

	resp := FollowingResponse{
		Following: followingList,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}
v
